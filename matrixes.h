/*
 * @file matrixes.h
 *
 * @author Anna Subbotina
 */

#ifndef _SLB_MATRIXES
#define _SLB_MATRIXES

#define POR 0.238

static void get_Al(vector<mat> &Al_arr)
{
	int n = Al_arr[0].n_rows;
	int l = Al_arr.size();
	mat Al(n, n, fill::eye);

	for (int i = 0; i < l; i++)
		Al_arr[i] = Al;
}

static void get_K(vector<mat> &K_arr)
{
	int n = K_arr[0].n_rows;
	int l = K_arr.size();

	mat K(n, n, fill::zeros);
	mat K0(n, n, fill::zeros);

	K(0, 0) = 700.72; K(1, 0) = -90.791; K(2, 0) = -51.8508; K(3, 0) = -20.9356;
	K(4, 0) = -16.6301; K(5, 0) = -36.7135; K(6, 0) = -12.6038; K(7, 0) = -11.0965;

	K(0, 1) = -90.4545; K(1, 1) = 410.508; K(2, 1) = 10.7879; K(3, 1) = -6.02379;
	K(4, 1) = 7.86314; K(5, 1) = 4.83955; K(6, 1) = 13.3205; K(7, 1) = 6.58391;

	K(0, 2) = -51.7445; K(1, 2) = 10.9115; K(2, 2) = 162.8; K(3, 2) = 24.564;
	K(4, 2) = 12.9702; K(5, 2) = 16.7895; K(6, 2) = 16.4923; K(7, 2) = 20.6626;

	K(0, 3) = -20.952; K(1, 3) = -5.76781; K(2, 3) = 24.6143; K(3, 3) = 110.027;
	K(4, 3) = 7.23522; K(5, 3) = 14.8657; K(6, 3) = 10.6427; K(7, 3) = 18.3762;

	K(0, 4) = -16.8055; K(1, 4) = 7.7814; K(2, 4) = 13.0678; K(3, 4) = 7.29436;
	K(4, 4) = 85.9633; K(5, 4) = 10.5721; K(6, 4) = 10.8133; K(7, 4) = 13.1033;

	K(0, 5) = -36.7031; K(1, 5) = 4.94953; K(2, 5) = 16.7641; K(3, 5) = 14.8475;
	K(4, 5) = 10.5869; K(5, 5) = 91.9372; K(6, 5) = 13.9441; K(7, 5) = 18.5697;

	K(0, 6) = -12.6047; K(1, 6) = 13.253; K(2, 6) = 16.6121; K(3, 6) = 10.6599;
	K(4, 6) = 10.821; K(5, 6) = 13.9652; K(6, 6) = 85.7859; K(7, 6) = 23.7649;

	K(0, 7) = -11.1; K(1, 7) = 6.64; K(2, 7) = 20.7; K(3, 7) = 18.4;
	K(4, 7) = 13.1; K(5, 7) = 18.6; K(6, 7) = 23.8; K(7, 7) = 68.8;

	K0(0, 0) = 724.4203; K0(1, 0) = -90.791; K0(2, 0) = -51.8508; K0(3, 0) = -20.9356;
	K0(4, 0) = -16.6301; K0(5, 0) = -36.7135; K0(6, 0) = 0.0; K0(7, 0) = 0.0;

	K0(0, 1) = -90.4545; K0(1, 1) = 390.6036; K0(2, 1) = 10.7879; K0(3, 1) = -6.02379;
	K0(4, 1) = 7.86314; K0(5, 1) = 4.83955; K0(6, 1) = 0.0; K0(7, 1) = 0.0;

	K0(0, 2) = -51.7445; K0(1, 2) = 10.9115; K0(2, 2) = 125.6451; K0(3, 2) = 24.564;
	K0(4, 2) = 12.9702; K0(5, 2) = 16.7895; K0(6, 2) = 0.0; K0(7, 2) = 0.0;

	K0(0, 3) = -20.952; K0(1, 3) = -5.76781; K0(2, 3) = 24.6143; K0(3, 3) = 81.008;
	K0(4, 3) = 7.23522; K0(5, 3) = 14.8657; K0(6, 3) = 0.0; K0(7, 3) = 0.0;

	K0(0, 4) = -16.8055; K0(1, 4) = 7.7814; K0(2, 4) = 13.0678; K0(3, 4) = 7.29436;
	K0(4, 4) = 62.0467; K0(5, 4) = 10.5721; K0(6, 4) = 0.0; K0(7, 4) = 0.0;

	K0(0, 5) = -36.7031; K0(1, 5) = 4.94953; K0(2, 5) = 16.7641; K0(3, 5) = 14.8475;
	K0(4, 5) = 10.5869; K0(5, 5) = 59.4234; K0(6, 5) = 0.0; K0(7, 5) = 0.0;

	K0(0, 6) = 0.0; K0(1, 6) = 0.0; K0(2, 6) = 0.0; K0(3, 6) = 0.0;
	K0(4, 6) = 0.0; K0(5, 6) = 0.0; K0(6, 6) = 0.0; K0(7, 6) = 0.0;

	K0(0, 7) = 0.0; K0(1, 7) = 0.0; K0(2, 7) = 0.0; K0(3, 7) = 0.0;
	K0(4, 7) = 0.0; K0(5, 7) = 0.0; K0(6, 7) = 0.0; K0(7, 7) = 0.0;

	for (int i = 0; i < l; i++)
		K_arr[i] = K * POR;

/*
	for (int i = 0; i < l* 0.2; i++)
		K_arr[i] = K;
	for (int i = l * 0.2; i < l * 0.8; i++)
		K_arr[i] = K0;
	for (int i = l * 0.8; i < l; i++)
		K_arr[i] = K;
*/

}

static void get_D(vector<mat> &D_arr)
{
	int n = D_arr[0].n_rows;
	int l = D_arr.size();
	mat D(n, n, fill::zeros);
	mat D0(n, n, fill::zeros);

	D(0, 0) = 57.9; D(1, 0) = -13.5; D(2, 0) = -6.0; D(3, 0) = -5.1;
	D(4, 0) = -5.4; D(5, 0) = -7.2; D(6, 0) = -9.7; D(7, 0) = -11.1;

	D(0, 1) = -13.5; D(1, 1) = 46.2; D(2, 1) = -4.0; D(3, 1) = -3.8;
	D(4, 1) = -4.1; D(5, 1) = -5.3; D(6, 1) = -7.0; D(7, 1) = -8.3;

	D(0, 2) = -6.0; D(1, 2) = -4.0; D(2, 2) = 24.2; D(3, 2) = -1.8;
	D(4, 2) = -1.9; D(5, 2) = -2.8; D(6, 2) = -3.5; D(7, 2) = -4.3;

	D(0, 3) = -5.1; D(1, 3) = -0.38; D(2, 3) = -1.8; D(3, 3) = 21.9;
	D(4, 3) = -1.7; D(5, 3) = -2.5; D(6, 3) = -3.1; D(7, 3) = -3.9;

	D(0, 4) = -5.4; D(1, 4) = -4.1; D(2, 4) = -1.9; D(3, 4) = -1.7;
	D(4, 4) = 22.8; D(5, 4) = -2.4; D(6, 4) = -3.3; D(7, 4) = -4.1;

	D(0, 5) = -7.2; D(1, 5) = -5.3; D(2, 5) = -2.8; D(3, 5) = -2.5;
	D(4, 5) = -2.4; D(5, 5) = 30.4; D(6, 5) = -4.5; D(7, 5) = -5.6;

	D(0, 6) = -9.7; D(1, 6) = -7.0; D(2, 6) = -3.5; D(3, 6) = -3.1;
	D(4, 6) = -3.3; D(5, 6) = -4.5; D(6, 6) = 38.3; D(7, 6) = -7.1;

	D(0, 7) = -11.2; D(1, 7) = -8.3; D(2, 7) = -4.3; D(3, 7) = -3.9;
	D(4, 7) = -4.1; D(5, 7) = -5.6; D(6, 7) = -7.1; D(7, 7) = 44.5;

	D0(0, 0) = 37.2; D0(1, 0) = -13.5; D0(2, 0) = -6.0; D0(3, 0) = -5.1;
	D0(4, 0) = -5.4; D0(5, 0) = -7.2; D0(6, 0) = 0.0; D0(7, 0) = 0.0;

	D0(0, 1) = -13.5; D0(1, 1) = 30.7; D0(2, 1) = -4.0; D0(3, 1) = -3.8;
	D0(4, 1) = -4.1; D0(5, 1) = -5.3; D0(6, 1) = 0.0; D0(7, 1) = 0.0;

	D0(0, 2) = -6.0; D0(1, 2) = -4.0; D0(2, 2) = 16.5; D0(3, 2) = -1.8;
	D0(4, 2) = -1.9; D0(5, 2) = -2.8; D0(6, 2) = 0.0; D0(7, 2) = 0.0;

	D0(0, 3) = -5.1; D0(1, 3) = -3.8; D0(2, 3) = -1.8; D0(3, 3) = 14.9;
	D0(4, 3) = -1.7; D0(5, 3) = -2.5; D0(6, 3) = 0.0; D0(7, 3) = 0.0;

	D0(0, 4) = -5.4; D0(1, 4) = -4.1; D0(2, 4) = -1.9; D0(3, 4) = -1.7;
	D0(4, 4) = 15.5; D0(5, 4) = -2.4; D0(6, 4) = 0.0; D0(7, 4) = 0.0;

	D0(0, 5) = -7.2; D0(1, 5) = -5.3; D0(2, 5) = -2.8; D0(3, 5) = -2.5;
	D0(4, 5) = -2.4; D0(5, 5) = 20.2; D0(6, 5) = 0.0; D0(7, 5) = 0.0;


	D0(0, 6) = 0.0; D0(1, 6) = 0.0; D0(2, 6) = 0.0; D0(3, 6) = 0.0;
	D0(4, 6) = 0.0; D0(5, 6) = 0.0; D0(6, 6) = 0.0; D0(7, 6) = 0.0;

	D0(0, 7) = 0.0; D0(1, 7) = 0.0; D0(2, 7) = 0.0; D0(3, 7) = 0.0;
	D0(4, 7) = 0.0; D0(5, 7) = 0.0; D0(6, 7) = 0.0; D0(7, 7) = 0.0;

	for (int i = 0; i < l; i++)
		D_arr[i] = D * POR;


/*
	for (int i = 0; i < l * 0.2; i++)
		D_arr[i] = D * 10;
	for (int i = l * 0.2; i < l * 0.8; i++)
		D_arr[i] = D0 * 10;
	for (int i = l * 0.8; i < l; i++)
		D_arr[i] = D * 10;
*/
}

static void get_left_edge(vec &left)
{

//	left(0) = 1;
//	left(1) = 1;
//	left(2) = 1;
//	left(3) = 1;
//	left(4) = 1;
//	left(5) = 1;
//	left(6) = 1;
//	left(7) = 1;

}

static void get_right_edge(vec &right)
{

//	right(0) = 1;
//	right(1) = 1;
//	right(2) = 1;
//	right(3) = 1;
//	right(4) = 1;
//	right(5) = 1;
//	right(6) = 1;
//	right(7) = 1;

}

#endif // _SLB_MATRIXES
